// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //A-instruction
	
	Mux16(a = instruction, b = ALUout, sel = instruction[15], out = ARegIn);
	
	//compute A-register control bit
	Mux(a = true, b = instruction[5], sel = instruction[15], out = ACBit);
	ARegister(in = ARegIn, load = ACBit, out[0..14] = addressM, out = RegAOut);
	
	//RegAOut shedis mux16Shi, inmTan erTad
	
	//compute d register control bit
	And(a = instruction[4], b = instruction[15], out = DCBit);
	DRegister(in = ALUout, load = DCBit, out = DRegOut);
	
	//compute ALU
	Mux16(a = RegAOut, b = inM, sel = instruction[12], out = AluY);
	
	ALU(x=DRegOut, y=AluY, zx=instruction[11], nx=instruction[10], 
	zy=instruction[9], ny=instruction[8], f=instruction[7], 
	no=instruction[6], out = ALUout, out=outM, zr=outIsZero, ng=outIsNeg);
	
	//determine wheter to jump or not
	Not(in = outIsZero, out = outIsNotZero);
	Not(in = outIsNeg, out = outIsNotNeg);
	And(a = outIsNotZero, b = outIsNotNeg, out = outIsPos);
	
	And(a = instruction[2], b = outIsNeg, out = Isj2One);
	And(a = instruction[1], b = outIsZero, out = Isj1One);
	And(a = instruction[0], b = outIsPos, out = Isj0One);
	
	Or8Way(in[0] = Isj0One, in[1] = Isj1One, in[2] = Isj2One, in[3..7] = false, out = shouldJump);
	
	And(a = instruction[15], b = shouldJump, out = pcCBit);
	
	PC(in = RegAOut, load = pcCBit, inc = true, reset = reset, out[0..14] = pc);
	And(a=instruction[3], b=instruction[15], out=writeM);
}